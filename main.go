package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"os"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
	"github.com/patrickmn/go-cache"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

type Config struct {
	TelegramToken string
	WeatherAPIKey string
}

func NewConfig() *Config {
	err := godotenv.Load()
	if err != nil {
		log.Println("‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}
	return &Config{
		TelegramToken: os.Getenv("TELEGRAM_BOT_TOKEN"),
		WeatherAPIKey: os.Getenv("OPENWEATHER_API_KEY"),
	}
}

type WeatherData struct {
	Name string `json:"name"`
	Main struct {
		Temp      float64 `json:"temp"`
		FeelsLike float64 `json:"feels_like"`
		Humidity  int     `json:"humidity"`
	} `json:"main"`
	Weather []struct {
		ID          int    `json:"id"`
		Main        string `json:"main"`
		Description string `json:"description"`
		Icon        string `json:"icon"`
	} `json:"weather"`
	Wind struct {
		Speed float64 `json:"speed"`
	} `json:"wind"`
	Timezone int `json:"timezone"`
	Dt       int `json:"dt"`
}

var (
	CityMap = map[string]string{
		"/moscow":        "–ú–æ—Å–∫–≤–∞",
		"/spb":           "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
		"/novosibirsk":   "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
		"/yekaterinburg": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
		"/kazan":         "–ö–∞–∑–∞–Ω—å",
		"/anadyr":        "–ê–Ω–∞–¥—ã—Ä—å",
	}
	WeatherIcon = map[string]string{
		"01d": "‚òÄÔ∏è", "01n": "üåô",
		"02d": "‚õÖ", "02n": "‚õÖ",
		"03d": "‚òÅÔ∏è", "03n": "‚òÅÔ∏è",
		"04d": "‚òÅÔ∏è", "04n": "‚òÅÔ∏è",
		"09d": "üåßÔ∏è", "09n": "üåßÔ∏è",
		"10d": "üå¶Ô∏è", "10n": "üå¶Ô∏è",
		"11d": "‚õàÔ∏è", "11n": "‚õàÔ∏è",
		"13d": "üå®Ô∏è", "13n": "üå®Ô∏è",
		"50d": "üå´Ô∏è", "50n": "üå´Ô∏è",
	}
	weatherCache = cache.New(10*time.Minute, 15*time.Minute)
)

func GetWeather(ctx context.Context, city string, apiKey string) (*WeatherData, error) {
	cacheKey := fmt.Sprintf("weather:%s:%d", city, time.Now().Truncate(10*time.Minute).Unix())
	if cached, found := weatherCache.Get(cacheKey); found {
		log.Printf("üì¶ –ö—ç—à —Ö–∏—Ç –¥–ª—è %s", city)
		return cached.(*WeatherData), nil
	}

	if strings.TrimSpace(city) == "" {
		return nil, fmt.Errorf("–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}
	baseURL := "https://api.openweathermap.org/data/2.5/weather"
	params := url.Values{}
	params.Set("q", city+",RU")
	params.Set("appid", apiKey)
	params.Set("units", "metric")
	params.Set("lang", "ru")
	url := baseURL + "?" + params.Encode()
	client := &http.Client{Timeout: 8 * time.Second}
	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ API: %d", resp.StatusCode)
	}
	var weather WeatherData
	if err := json.NewDecoder(resp.Body).Decode(&weather); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %w", err)
	}
	if weather.Name == "" {
		return nil, fmt.Errorf("–≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", city)
	}
	weatherCache.Set(cacheKey, &weather, cache.DefaultExpiration)
	return &weather, nil
}

func FormatWeatherMessage(w *WeatherData) string {
	desc := w.Weather[0].Description
	iconCode := w.Weather[0].Icon
	icon := WeatherIcon[iconCode]
	if icon == "" {
		icon = "üå°Ô∏è"
	}
	cityName := cases.Title(language.Russian).String(w.Name)
	utcTime := time.Unix(int64(w.Dt), 0).UTC()
	localOffset := time.Duration(w.Timezone) * time.Second
	localTime := utcTime.Add(localOffset)
	readableTime := localTime.Format("15:04")
	temp := int(round(w.Main.Temp))
	feelsLike := int(round(w.Main.FeelsLike))
	humidity := w.Main.Humidity
	windSpeed := w.Wind.Speed

	baseMsg := fmt.Sprintf(
		"üåç *%s* —Å–µ–π—á–∞—Å (%s):\n"+
			"%s %s %s\n"+
			"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %d¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %d¬∞C)\n"+
			"–í–ª–∞–∂–Ω–æ—Å—Ç—å: %d%%\n"+
			"–í–µ—Ç–µ—Ä: %.1f –º/—Å",
		cityName,
		readableTime,
		cases.Title(language.Russian).String(desc),
		icon, icon,
		temp,
		feelsLike,
		humidity,
		windSpeed,
	)

	var tip string
	switch {
	case strings.Contains(strings.ToLower(desc), "–¥–æ–∂–¥—å"):
		tip = " ‚òî –õ—å—ë—Ç –∫–∞–∫ –∏–∑ –≤–µ–¥—Ä–∞! –ó–æ–Ω—Ç –±–µ—Ä–∏ –∏–ª–∏ —Ç–∞–Ω—Ü—É–π –ø–æ–¥ –ª–∏–≤–Ω–µ–º, –∫–∞–∫ –≤ –∫–ª–∏–ø–µ! üíÉ"
	case strings.Contains(strings.ToLower(desc), "—Å–Ω–µ–≥"):
		tip = " ‚ùÑÔ∏è –°–Ω–µ–∂–æ–∫ –∏–¥—ë—Ç! –õ–µ–ø–∏ —Å–Ω–µ–≥–æ–≤–∏–∫–∞ –∏–ª–∏ –≥—Ä–µ–º–∏ —á–∞–π–Ω–∏–∫ –¥–ª—è –∫–∞–∫–∞–æ! ‚òï‚õÑ"
	case strings.Contains(strings.ToLower(desc), "–≥—Ä–æ–∑"):
		tip = " ‚õàÔ∏è –ì—Ä–æ–º –≥—Ä–µ–º–∏—Ç! –°–∏–¥–∏ –¥–æ–º–∞, —Å–º–æ—Ç—Ä–∏ –∫–∏–Ω–æ, –º–æ–ª–Ω–∏—è ‚Äî –Ω–µ —Ç–≤–æ–π –±—Ä–æ! üò¨"
	case temp > 30:
		tip = " üî• –ü–µ–∫–ª–æ! –•–≤–∞—Ç–∞–π –º–æ—Ä–æ–∂–µ–Ω–æ–µ –∏ –Ω—ã—Ä—è–π –≤ —Ç–µ–Ω—å, –±—Ä–æ! üç¶üå¥"
	case temp > 25:
		tip = " ‚òÄÔ∏è –ñ–∞—Ä–∫–æ–≤–∞—Ç–æ! –ö–æ–∫—Ç–µ–π–ª—å –≤ –ø–∞—Ä–∫–µ –∏–ª–∏ –∫–æ–Ω–¥–µ–π –Ω–∞ –ø–æ–ª–Ω—É—é? –í—ã–±–∏—Ä–∞–π wisely! üçπ"
	case temp < -10:
		tip = " ü•∂ –õ–µ–¥—è–Ω–æ–π –∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å! –£–∫—É—Ç–∞–π—Å—è, –∫–∞–∫ –ø–∏–Ω–≥–≤–∏–Ω, –∏ –ø–µ–π –≥–æ—Ä—è—á–∏–π —á–∞–π! üß£‚òï"
	case temp < 0:
		tip = " ‚ùÑÔ∏è –•–æ–ª–æ–¥—Ä—ã–≥–∞! –®–∞—Ä—Ñ, —à–∞–ø–∫–∞ –∏ —Ç—ë–ø–ª—ã–µ –Ω–æ—Å–∫–∏ ‚Äî —Ç–≤–æ–π must-have! üß¶"
	case humidity > 80:
		tip = " üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –∑–∞—à–∫–∞–ª–∏–≤–∞–µ—Ç! –ö—Ä–µ–º –æ—Ç —Å—ã—Ä–æ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ chill —É –≤–æ–¥—ã? üåä"
	case windSpeed > 15:
		tip = " üå™Ô∏è –í–µ—Ç—Ä–∏—â–µ —à—Ç–æ—Ä–º–æ–≤–æ–π! –î–µ—Ä–∂–∏ —à–ª—è–ø—É –∏ –Ω–µ —É–ª–µ—Ç–∏, –∫–∞–∫ –ö–∞—Ä–ª—Å–æ–Ω! üöÅ"
	case windSpeed > 10:
		tip = " üí® –í–µ—Ç–µ—Ä –∫—Ä–µ–ø–∫–∏–π! –ó–∞–≤—è–∂–∏ —à–Ω—É—Ä–∫–∏ –ø–æ—Ç—É–∂–µ, –∞ —Ç–æ —É–Ω–µ—Å—ë—Ç –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º! üòé"
	case strings.Contains(strings.ToLower(desc), "—è—Å–Ω–æ"):
		tip = " üåû –°–æ–ª–Ω—Ü–µ —Å–∏—è–µ—Ç! –•–≤–∞—Ç–∞–π –æ—á–∫–∏ –∏ –≥—É–ª—è–π, –ø–æ–∫–∞ –ø–æ–≥–æ–¥–∞ —à–µ–ø—á–µ—Ç! üòéüö∂‚Äç‚ôÇÔ∏è"
	default:
		tip = " üòé –ü–æ–≥–æ–¥–∞ ‚Äî –∫–∞–π—Ñ! –í—ã—Ö–æ–¥–∏ –Ω–∞ —É–ª–∏—Ü—É, –ª–æ–≤–∏ –≤–∞–π–± –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è! üå≥üéâ"
	}

	return baseMsg + tip
}

func round(f float64) float64 {
	if f >= 0 {
		return float64(int(f + 0.5))
	}
	return float64(int(f - 0.5))
}

func main() {
	cfg := NewConfig()
	if cfg.TelegramToken == "" {
		log.Fatal("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ .env")
	}
	if cfg.WeatherAPIKey == "" {
		log.Fatal("‚ùå OPENWEATHER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ .env")
	}
	bot, err := tgbotapi.NewBotAPI(cfg.TelegramToken)
	if err != nil {
		log.Fatal("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞:", err)
	}
	log.Printf("‚úÖ –ë–æ—Ç @%s –∑–∞–ø—É—â–µ–Ω! (–∫–æ–º–∞–Ω–¥—ã —Å –º–µ–Ω—é)", bot.Self.UserName)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ —Å retry
	for attempt := 0; attempt < 3; attempt++ {
		commands := tgbotapi.NewSetMyCommands(
			tgbotapi.BotCommand{Command: "/start", Description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
			tgbotapi.BotCommand{Command: "/help", Description: "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"},
			tgbotapi.BotCommand{Command: "/moscow", Description: "–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ"},
			tgbotapi.BotCommand{Command: "/spb", Description: "–ü–æ–≥–æ–¥–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ"},
			tgbotapi.BotCommand{Command: "/novosibirsk", Description: "–ü–æ–≥–æ–¥–∞ –≤ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ"},
			tgbotapi.BotCommand{Command: "/yekaterinburg", Description: "–ü–æ–≥–æ–¥–∞ –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ"},
			tgbotapi.BotCommand{Command: "/kazan", Description: "–ü–æ–≥–æ–¥–∞ –≤ –ö–∞–∑–∞–Ω–∏"},
			tgbotapi.BotCommand{Command: "/anadyr", Description: "–ü–æ–≥–æ–¥–∞ –≤ –ê–Ω–∞–¥—ã—Ä–µ"},
		)
		resp, err := bot.Request(commands)
		if err == nil && resp.Ok {
			log.Printf("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
			break
		}
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥ (–ø–æ–ø—ã—Ç–∫–∞ %d): %v", attempt+1, err)
		if attempt < 2 {
			time.Sleep(time.Duration(2<<attempt) * time.Second)
		} else {
			log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
		}
	}

	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60
	updates := bot.GetUpdatesChan(updateConfig)
	for update := range updates {
		if update.Message != nil && update.Message.Text != "" {
			ctx, cancel := context.WithTimeout(context.Background(), 8*time.Second)

			text := strings.ToLower(strings.TrimSpace(update.Message.Text))
			city := ""

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
			if text == "/start" || text == "/help" {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID,
					"üåç *–ü—Ä–∏–≤–µ—Ç, –±—Ä–æ!* –Ø —Ç–≤–æ–π –ø–æ–≥–æ–¥–Ω—ã–π –≥–∏–¥ –ø–æ –†–æ—Å—Å–∏–∏! ‚òÄÔ∏è –•–æ—á–µ—à—å –∑–Ω–∞—Ç—å, –±—Ä–∞—Ç—å –ª–∏ –∑–æ–Ω—Ç –≤ –ü–∏—Ç–µ—Ä–µ –∏–ª–∏ —à–æ—Ä—Ç—ã –≤ –ö–∞–∑–∞–Ω–∏? –ü–∏—à–∏ –≥–æ—Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞) –∏–ª–∏ –∂–º–∏ –∫–æ–º–∞–Ω–¥—ã:\n"+
						"/moscow ‚Äî –ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ\n"+
						"/spb ‚Äî –ü–æ–≥–æ–¥–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ\n"+
						"/novosibirsk ‚Äî –ü–æ–≥–æ–¥–∞ –≤ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ\n"+
						"/yekaterinburg ‚Äî –ü–æ–≥–æ–¥–∞ –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ\n"+
						"/kazan ‚Äî –ü–æ–≥–æ–¥–∞ –≤ –ö–∞–∑–∞–Ω–∏\n"+
						"/anadyr ‚Äî –ü–æ–≥–æ–¥–∞ –≤ –ê–Ω–∞–¥—ã—Ä–µ\n"+
						"/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–Ω–æ–≤–∞\n"+
						"–õ–æ–≤–∏ –≤–∞–π–± –∏ –ø–æ–≥–æ–¥—É! üòéüö∂‚Äç‚ôÇÔ∏è")
				msg.ParseMode = tgbotapi.ModeMarkdown
				_, err := bot.Send(msg)
				if err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏: %v", err)
				}
				cancel() // –Ø–≤–Ω—ã–π –≤—ã–∑–æ–≤ –≤–º–µ—Å—Ç–æ defer
				continue
			} else if cityName, ok := CityMap[text]; ok {
				city = cityName
			} else {
				city = update.Message.Text // –í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é
			}

			weather, err := GetWeather(ctx, city, cfg.WeatherAPIKey)
			if err != nil {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %v", err))
				_, sendErr := bot.Send(msg)
				if sendErr != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏: %v", sendErr)
				}
				cancel() // –Ø–≤–Ω—ã–π –≤—ã–∑–æ–≤ –≤–º–µ—Å—Ç–æ defer
				continue
			}

			msg := tgbotapi.NewMessage(update.Message.Chat.ID, FormatWeatherMessage(weather))
			msg.ParseMode = tgbotapi.ModeMarkdown
			_, err = bot.Send(msg)
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã: %v", err)
			}
			cancel() // –Ø–≤–Ω—ã–π –≤—ã–∑–æ–≤ –≤–º–µ—Å—Ç–æ defer
		}
	}
}
